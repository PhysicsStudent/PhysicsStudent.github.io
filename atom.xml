<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>simple fun</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-07T06:00:56.724Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ZhongwenOu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fortran</title>
    <link href="http://example.com/2022/06/07/fortran/"/>
    <id>http://example.com/2022/06/07/fortran/</id>
    <published>2022-06-07T06:00:16.000Z</published>
    <updated>2022-06-07T06:00:56.724Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个关于fortran 的一个简单的入门学习笔记，包括fortran语言一些基础内容和相关的示例代码。主要的内容来源于<a href="https://www.yiibai.com/fortran">fortran教程 </a></p><h3 id="fortran的数据类型和变量"><a href="#fortran的数据类型和变量" class="headerlink" title="fortran的数据类型和变量"></a>fortran的数据类型和变量</h3><ul><li>整型 integer （容纳整数值）</li><li>实型 real （浮点数）</li><li>复杂类型 complex （复数）</li><li>逻辑类型 logical （布尔数）</li><li>字符类型 character （字符串）</li><li>隐式类型 implicit （无定义类型）</li></ul><p>变量声明语法(type-specifier :: variable_name)</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> variableTesting </span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">integer</span> :: total</span><br><span class="line"><span class="keyword">real</span> :: average</span><br><span class="line"><span class="keyword">complex</span> :: cx</span><br><span class="line"><span class="keyword">logical</span> :: done</span><br><span class="line"><span class="keyword">character</span> :: message</span><br><span class="line"></span><br><span class="line">total=<span class="number">1000</span></span><br><span class="line">average=<span class="number">2323.453</span></span><br><span class="line">done=.true.</span><br><span class="line">message=<span class="string">&quot;hello world&quot;</span></span><br><span class="line">cx=(<span class="number">12</span>,<span class="number">2.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> *, total</span><br><span class="line"><span class="built_in">print</span> *, cx</span><br><span class="line"><span class="built_in">print</span> *, average</span><br><span class="line"><span class="built_in">print</span> *, message</span><br><span class="line"><span class="built_in">print</span> *, done</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> variableTesting</span><br></pre></td></tr></table></figure><h3 id="fortran常量"><a href="#fortran常量" class="headerlink" title="fortran常量"></a>fortran常量</h3><ul><li>字面常量</li><li>命名常量</li></ul><p>命名常量，需要声明名称和类型，例如(real,parameter :: pi&#x3D;3.1415926)</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> gravitationDisp</span><br><span class="line"></span><br><span class="line"><span class="keyword">real</span>,<span class="keyword">parameter</span> :: g=<span class="number">9.81</span></span><br><span class="line"><span class="keyword">real</span> :: s</span><br><span class="line"><span class="keyword">real</span> :: t</span><br><span class="line"><span class="keyword">real</span> :: u</span><br><span class="line"></span><br><span class="line">t=<span class="number">5.0</span></span><br><span class="line">u=<span class="number">50</span></span><br><span class="line">s=u*t-g*(t**<span class="number">2</span>)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> *, <span class="string">&quot;Time =&quot;</span>,t</span><br><span class="line"><span class="built_in">print</span> *, <span class="string">&quot;Dispacement =&quot;</span>,s</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> gravitationDisp </span><br></pre></td></tr></table></figure><h3 id="fortran运算符"><a href="#fortran运算符" class="headerlink" title="fortran运算符"></a>fortran运算符</h3><ul><li>算术运算符 (+,-,*,&#x2F;,**)</li><li>关系运算符 (&#x3D;&#x3D;,&#x2F;&#x3D;,&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;);(.eq.;.ne.;.gt.;.lt.;.ge.;.le.)</li><li>逻辑运算符 (.and.;.or.;.not.;.eqv.;.neqv.)</li></ul><p>注意计算优先级顺序</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arithmeticOp</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">integer</span> :: a,b,c</span><br><span class="line"> </span><br><span class="line"> a=<span class="number">3</span></span><br><span class="line"> b=<span class="number">5</span></span><br><span class="line"> </span><br><span class="line"> c=a**b</span><br><span class="line"> <span class="built_in">print</span> *,<span class="string">&quot;c=a**b&quot;</span>,c</span><br><span class="line"> </span><br><span class="line"> c=a/b</span><br><span class="line"> <span class="built_in">print</span> *,<span class="string">&quot;c=a*b&quot;</span>,c</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arithmeticOp</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> logicalOp</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">logical</span> :: a, b</span><br><span class="line">   </span><br><span class="line">   a = .true.</span><br><span class="line">   b = .false.</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (a .and. b) <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 1 - Condition is true&quot;</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 1 - Condition is false&quot;</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (a .or. b) <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 2 - Condition is true&quot;</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 2 - Condition is false&quot;</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">   </span><br><span class="line">   a = .false.</span><br><span class="line">   b = .true.</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (.not.(a .and. b)) <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 3 - Condition is true&quot;</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 3 - Condition is false&quot;</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (b .neqv. a) <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 4 - Condition is true&quot;</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 4 - Condition is false&quot;</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (b .eqv. a) <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 5 - Condition is true&quot;</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">print</span> *, <span class="string">&quot;Line 5 - Condition is false&quot;</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> logicalOp</span><br></pre></td></tr></table></figure><h3 id="fortran-选择决策结构"><a href="#fortran-选择决策结构" class="headerlink" title="fortran 选择决策结构"></a>fortran 选择决策结构</h3><ul><li>决策的一般结构</li></ul><p><img src="https://www.yiibai.com/uploads/allimg/141120/0Z5234243-0.jpg"></p><ul><li>决策的类型</li></ul><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">if…then</td><td align="left">f… then… end if 语句由一个逻辑表达式后跟一个或多个语句</td></tr><tr><td align="left">if…then…else</td><td align="left">后面可选 else statement,逻辑表达式为假</td></tr><tr><td align="left">内嵌if</td><td align="left">可以使用一个 if 或 else if 语句在另外一个 if 或 else if 语句内部</td></tr><tr><td align="left">select case</td><td align="left">Select Case语句允许一个变量的值对的列表，平等进行测试</td></tr><tr><td align="left">内嵌select case</td><td align="left">可以使用一个select case语句中的另一个选择case语句</td></tr></tbody></table><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> ifPron</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">integer</span> :: a=<span class="number">10</span></span><br><span class="line"><span class="keyword">real</span> :: marks=<span class="number">90.4</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a&lt;<span class="number">20</span>) <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span> *, <span class="string">&quot;a&lt;20&quot;</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"><span class="built_in">print</span> *,<span class="string">&quot;a=&quot;</span>,a</span><br><span class="line"></span><br><span class="line">gr: <span class="keyword">if</span> (marks&gt;<span class="number">90</span>) <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span> *,<span class="string">&quot;Grade A&quot;</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span> gr</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> ifPron</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> ifElseProg</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span> :: a=<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">20</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;a&lt;20&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;a&gt;20&quot;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;a=&quot;</span>,a</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> ifElseProg</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> nestedIfProg</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span> :: a= <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a&lt;<span class="number">100</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> (a&gt;<span class="number">40</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;40&lt;a&lt;100&quot;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span> </span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> nestedIfProg</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> sleectCaseprog</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">character</span> :: grade=<span class="string">&#x27;B&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">case</span> (grade)</span><br><span class="line">    <span class="keyword">case</span>(<span class="string">&quot;A&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;Excellent&quot;</span></span><br><span class="line">    <span class="keyword">case</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;Well done&quot;</span></span><br><span class="line">    <span class="keyword">case</span> (<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>*, <span class="string">&quot;You passed&quot;</span> </span><br><span class="line">    <span class="keyword">case</span> (<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>*, <span class="string">&quot;Better try again&quot;</span> </span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">default</span> </span><br><span class="line">    <span class="built_in">print</span> * ,<span class="string">&quot;Invalid grade&quot;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">select</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;your grade is &quot;</span>,grade</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> sleectCaseprog</span><br></pre></td></tr></table></figure><h3 id="fortran-循环"><a href="#fortran-循环" class="headerlink" title="fortran 循环"></a>fortran 循环</h3><ul><li>循环的一般形式</li></ul><p><img src="https://www.yiibai.com/uploads/allimg/141120/1506396496-0.jpg"></p><ul><li>循环的类型</li></ul><table><thead><tr><th align="left">循环类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">do循环</td><td align="left">该构建体使得语句或一系列语句迭代进行，当一个给定的条件为真。</td></tr><tr><td align="left">do while 循环</td><td align="left">重复声明语句或一组，当给定的条件为真。它测试的条件执行循环体之前。</td></tr><tr><td align="left">内嵌循环</td><td align="left">可以使用一个或多个循环结构在其他循环结构里面。</td></tr></tbody></table><h3 id="循环的控制语句"><a href="#循环的控制语句" class="headerlink" title="循环的控制语句"></a>循环的控制语句</h3><table><thead><tr><th align="left">控制语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">exit</td><td align="left">如果被执行exit语句则会退出该循环，并且该程序的继续执行第一个可执行语句结束之后的语句执行。</td></tr><tr><td align="left">cycle</td><td align="left">如果执行了一个循环语句，则程序继续到下一次迭代的起始位置。</td></tr><tr><td align="left">stop</td><td align="left">如果想执行的程序停止，可以插入声明一个stop语句</td></tr></tbody></table><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> forProg</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span> :: n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> n=<span class="number">1</span>,<span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;n=&quot;</span>,n</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> forProg</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> forProg</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span> :: n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> n=<span class="number">1</span>,<span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;n=&quot;</span>,n</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> forProg</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> dowhilePro</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">     <span class="keyword">integer</span> :: nfact=<span class="number">1</span>,n=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">do</span> <span class="keyword">while</span> (n&lt;=<span class="number">10</span>)</span><br><span class="line">        nfact=nfact*n</span><br><span class="line">        n=n+<span class="number">1</span></span><br><span class="line">     <span class="keyword">end</span> <span class="keyword">do</span> </span><br><span class="line"></span><br><span class="line">     <span class="built_in">print</span> *,<span class="string">&quot;n!=&quot;</span>,nfact</span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> dowhilePro</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> nestedloop</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">integer</span> :: i,j,k</span><br><span class="line">    iloop: <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">        jloop: <span class="keyword">do</span> j=<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">            kloop: <span class="keyword">do</span> k=<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">                <span class="built_in">print</span>*,<span class="string">&quot;(i,j,k):&quot;</span>,i,j,k</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (k==<span class="number">2</span>) <span class="keyword">then</span> </span><br><span class="line">                    <span class="keyword">exit</span> jloop</span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">do</span> kloop</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span> jloop</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span> iloop</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> nestedloop</span><br><span class="line">```fortran</span><br><span class="line"><span class="function"><span class="keyword">program</span></span> cycle_pro</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">integer</span> :: i</span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">10</span></span><br><span class="line">      <span class="keyword">if</span> (i==<span class="number">7</span>) <span class="keyword">then</span></span><br><span class="line">         <span class="keyword">cycle</span></span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">      <span class="built_in">print</span> *,<span class="string">&quot;i=&quot;</span>,i</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> cycle_pro</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> stop_pro</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">integer</span> :: i</span><br><span class="line">   <span class="keyword">do</span> i = <span class="number">1</span>, <span class="number">20</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">5</span>) <span class="keyword">then</span></span><br><span class="line">         <span class="keyword">stop</span></span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>*, i</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> stop_pro</span><br></pre></td></tr></table></figure><h3 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h3><ul><li>字符声明(character :: variable_name)</li><li>字符串接(“&#x2F;&#x2F;“)</li><li>字符函数(len,index,achar,iachar,trim,scan,varify,adjustr,adjustl,len_trim,repeat)</li><li>检查词法顺序字符(lle,lge,lgt,lgt,llt)</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> hello</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">15</span>) :: surname, firstname</span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">6</span>) :: title</span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">40</span>):: <span class="keyword">name</span></span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">25</span>)::greetings</span><br><span class="line"></span><br><span class="line">   title = <span class="string">&#x27;Mr.&#x27;</span></span><br><span class="line">   firstname = <span class="string">&#x27;Rowan&#x27;</span></span><br><span class="line">   surname = <span class="string">&#x27;Atkinson&#x27;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">name</span> = title//firstname//surname</span><br><span class="line">   greetings = <span class="string">&#x27;A big hello from Mr. Beans&#x27;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *, <span class="string">&#x27;Here is&#x27;</span>, <span class="keyword">name</span></span><br><span class="line">   <span class="built_in">print</span> *, greetings</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> hello</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> datatime</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">8</span>) :: dateinfo</span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">4</span>) :: year,month*<span class="number">2</span>,day*<span class="number">2</span></span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">10</span>) :: timeinfo</span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">2</span>) :: hour,minute,second*<span class="number">6</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">call</span> <span class="built_in">date_and_time</span>(dateinfo,timeinfo)</span><br><span class="line"></span><br><span class="line">   year=dateinfo(<span class="number">1</span>:<span class="number">4</span>)</span><br><span class="line">   month=dateinfo(<span class="number">5</span>:<span class="number">6</span>)</span><br><span class="line">   day=dateinfo(<span class="number">7</span>:<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">   hour   = timeinfo(<span class="number">1</span>:<span class="number">2</span>)</span><br><span class="line">   minute = timeinfo(<span class="number">3</span>:<span class="number">4</span>)</span><br><span class="line">   second = timeinfo(<span class="number">5</span>:<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;------data------&quot;</span></span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;year:&quot;</span>,year</span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;month:&quot;</span>,month</span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;day:&quot;</span>,day</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;------time------&quot;</span></span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;hour:&quot;</span>,hour</span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;minute:&quot;</span>,minute</span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;second:&quot;</span>,second</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> datatime</span><br></pre></td></tr></table></figure><h3 id="fortran-数组"><a href="#fortran-数组" class="headerlink" title="fortran 数组"></a>fortran 数组</h3><ul><li>声明数组 (real,dimension(5)::numbers,integer;dimension(5,5)::matrix;real,dimension(2:6)::numbers)</li><li>赋值 (numbers(i)&#x3D;2.0;numbers &#x3D; (&#x2F;1.5,3.2,4.5,0.9,7.2&#x2F;))</li><li>数组的相关术语(Rank,Extent,Shape,Size)</li><li>数组部分(array ([lower]:[upper][:stride],…))，默认跨度为1</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arrayProgs</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">real</span> :: numbers(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">real</span> :: a(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">integer</span> :: matrix(<span class="number">5</span>,<span class="number">5</span>),i,j</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">5</span></span><br><span class="line">        numbers(i)=i*<span class="number">2.0</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">5</span></span><br><span class="line">        <span class="keyword">do</span> j=<span class="number">1</span>,<span class="number">5</span></span><br><span class="line">            matrix(i,j)=i*j</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    a=(/<span class="number">1.5</span>,<span class="number">3.2</span>,<span class="number">4.5</span>,<span class="number">0.9</span>,<span class="number">7.2</span>/)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;matrix(5,5)=&quot;</span>,matrix(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;array(4)=&quot;</span>,a(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arrayProgs</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arrayPro</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">20</span>) :: a,b</span><br><span class="line">    <span class="keyword">integer</span> :: i,asize,bsize</span><br><span class="line"></span><br><span class="line">    a(<span class="number">1</span>:<span class="number">7</span>)=<span class="number">5.67</span></span><br><span class="line">    a(<span class="number">8</span>:)=<span class="number">20.3</span></span><br><span class="line">    b(<span class="number">1</span>:<span class="number">19</span>:<span class="number">2</span>)=<span class="number">23.34</span></span><br><span class="line">    b(<span class="number">2</span>:<span class="number">20</span>:<span class="number">2</span>)=<span class="number">65.23</span></span><br><span class="line"></span><br><span class="line">    asize=<span class="built_in">size</span>(a)</span><br><span class="line">    bsize=<span class="built_in">size</span>(b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> i=<span class="number">1</span>,asize</span><br><span class="line">        <span class="built_in">print</span> *,<span class="string">&quot;a(&quot;</span>,i,<span class="string">&quot;)=&quot;</span>,a(i)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> i=<span class="number">1</span>,bsize</span><br><span class="line">        <span class="built_in">print</span> *,<span class="string">&quot;b(&quot;</span>,i,<span class="string">&quot;)=&quot;</span>,b(i)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arrayPro</span><br></pre></td></tr></table></figure><h3 id="fortran-向量和矩阵乘法"><a href="#fortran-向量和矩阵乘法" class="headerlink" title="fortran 向量和矩阵乘法"></a>fortran 向量和矩阵乘法</h3><ul><li>向量和矩阵乘法函数</li></ul><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">dot_product(vector_a,vector_b)</td><td align="left">函数返回两个输入向量，它必须具有相同长度的标量积。</td></tr><tr><td align="left">matmul (matrix_a, matrix_b)</td><td align="left">它返回两个矩阵的矩阵乘积，它必须是一致的，即具有相似大小(m,k)和 (k,n)</td></tr></tbody></table><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> mathProduct</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">   <span class="keyword">real</span> ,<span class="keyword">dimension</span>(<span class="number">5</span>,<span class="number">5</span>):: a,b,c</span><br><span class="line">   <span class="keyword">integer</span> :: i,j</span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">5</span></span><br><span class="line">      <span class="keyword">do</span> j=<span class="number">1</span>,<span class="number">5</span></span><br><span class="line">         a(i,j)=i*j+<span class="number">1</span></span><br><span class="line">         <span class="built_in">print</span> *,a(i,j)</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">5</span></span><br><span class="line">      <span class="keyword">do</span> j=<span class="number">1</span>,<span class="number">5</span></span><br><span class="line">         b(i,j)=i+j+<span class="number">1</span></span><br><span class="line">         <span class="built_in">print</span> *, b(i,j)</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">   c=<span class="built_in">matmul</span>(a,b)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;matrix multiplication:&quot;</span></span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">5</span></span><br><span class="line">      <span class="keyword">do</span> j=<span class="number">1</span>,<span class="number">5</span></span><br><span class="line">         <span class="built_in">print</span> *,c(i,j)</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> mathProduct</span><br></pre></td></tr></table></figure><h3 id="fortran-还原功能"><a href="#fortran-还原功能" class="headerlink" title="fortran 还原功能"></a>fortran 还原功能</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">all(mask, dim)</td><td align="left">它返回一个逻辑值，指明掩码的所有关系是 .true。以及只有所需的维度，如果第二个参数是给定的。</td></tr><tr><td align="left">any(mask,dim)</td><td align="left">它返回一个逻辑值，指明掩码的任何关系是.true。以及只有所需的维度，如果第二个参数是给定的。</td></tr><tr><td align="left">count(mask,dim)</td><td align="left">它返回一个数字值，该值为掩码为 .true 关系的数目。以及所需的维数，如果第二个参数给出。</td></tr><tr><td align="left">maxval(array,dim,mask)</td><td align="left">它返回 的数组的数组中最大的值，那些遵守于第三个参数掩码的关系，如果一个给定的，以及具有只有所需的维数，如果第二个参数 dim给出的。</td></tr><tr><td align="left">minval(array,dim,mask)</td><td align="left">它返回数组的数组中那些遵守于第三个参数掩码的关系的最小值，如果一个给定的，以及具有仅在第二个参数 dim 给出所期望的维度。</td></tr><tr><td align="left">product(array,dim,mask)</td><td align="left">它返回该产品遵守于第三个参数掩码的关系，如果一个给定的，以及具有只有所需的维数，如果第二个参数 dim 给出的所有数组的数组中的元素。</td></tr><tr><td align="left">sum(array,dim,mask)</td><td align="left">它返回 遵守于第三个参数掩码关系的总和，如果给定以及具有只有所需的维数，如果第二个参数 dim给出的所有数组的数组中的元素。</td></tr></tbody></table><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arrayReduction</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">3</span>,<span class="number">2</span>):: a</span><br><span class="line">   a = <span class="built_in">reshape</span>( (/<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">12</span>/), (/<span class="number">3</span>,<span class="number">2</span>/))</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">all</span>(a&gt;<span class="number">5</span>)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">any</span>(a&gt;<span class="number">5</span>)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">count</span>(a&gt;<span class="number">5</span>)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">all</span>(a&gt;<span class="number">5.</span>and.a&lt;<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arrayReduction</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arrayReduction</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">1</span>:<span class="number">6</span>) :: a=(/<span class="number">21.3</span>,<span class="number">34.2</span>,<span class="number">46.6</span>,<span class="number">24.0</span>,<span class="number">12.7</span>,<span class="number">25.4</span>/)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> *,<span class="built_in">maxval</span>(a)</span><br><span class="line">    <span class="built_in">print</span> *,<span class="built_in">minval</span>(a)</span><br><span class="line">    <span class="built_in">print</span> *,<span class="built_in">sum</span>(a)</span><br><span class="line">    <span class="built_in">print</span> *,<span class="built_in">product</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arrayReduction</span><br></pre></td></tr></table></figure><h3 id="fortran-查询函数"><a href="#fortran-查询函数" class="headerlink" title="fortran 查询函数"></a>fortran 查询函数</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">allocated(array)</td><td align="left">它是一个逻辑功能，它指示该阵列被分配。</td></tr><tr><td align="left">lbound(array,dim)</td><td align="left">它返回的数组的维数较低的限制。如果dim(尺寸)不给出一个参数，会得到一个整数向量，如果dim计算在内，得到的整数值正好具有较低维数的限制。</td></tr><tr><td align="left">shape(source)</td><td align="left">它返回一个阵列源为一个整数向量的形状。</td></tr></tbody></table><pre><code>implicit none real,dimension(3,2)::aa = reshape((/5,9,6,10,8,12/),(/3,2/))print *,lbound(a,dim=1)print *,ubound(a,dim=1)print *,shape(a)print *,size(a,dim=1)</code></pre><p>end program arrayIquiry</p><p>|size(array,dim)|它返回在数组元素的数目。如果dim没有给出，并在相关维数的元素个数，如果dim也包括在内。|<br>|ubound(array,dim)|它返回尺寸的限制。|</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arrayIquiry</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">3</span>,<span class="number">2</span>)::a</span><br><span class="line">    a = <span class="built_in">reshape</span>((/<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">12</span>/),(/<span class="number">3</span>,<span class="number">2</span>/))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> *,<span class="built_in">lbound</span>(a,<span class="built_in">dim</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span> *,<span class="built_in">ubound</span>(a,<span class="built_in">dim</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span> *,<span class="built_in">shape</span>(a)</span><br><span class="line">    <span class="built_in">print</span> *,<span class="built_in">size</span>(a,<span class="built_in">dim</span>=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arrayIquiry</span><br></pre></td></tr></table></figure><h3 id="fortran-构造函数"><a href="#fortran-构造函数" class="headerlink" title="fortran 构造函数"></a>fortran 构造函数</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">merge(tsource, fsource, mask)</td><td align="left">该功能连接两个阵列。它给出了tsource及元素，如果mask条件是.true。如果掩码的条件是.false。这两个字段tsource 和fsource 必须是相同的类型并具有相同的形状。其结果也就是这种类型和形状。还掩码必须具有相同的形状。</td></tr><tr><td align="left">pack(array, mask, vector)</td><td align="left">它包一个阵列，以使用掩码的控制向量。逻辑阵列掩模的形状，具有以符合一个用于阵列，要不然掩码必须是一个标量。如果载体被包括在内，它必须是秩1与至少一样多的元素是在掩码为真，并且具有相同的类型的数组的数组(即一个向量)。如果掩码的值为.true。然后矢量代替必须的元件阵列的数量相同。</td></tr><tr><td align="left">spread(source,dim,ncopies)</td><td align="left">它返回相同类型作为参数源与秩增加一个阵列。参数dim 和ncopies都是整数。如果ncopies是负则用零值来代替。如果source是一个标量，然后扩散变得所有具有相同值 ncopies 元素的向量。参数dim 指示哪个索引将被延长。它必须是范围为1和1+(源级)中，如果 source 是一个标量，dim 必须是1。参数 ncopies 是在新的尺寸元素的数量。</td></tr><tr><td align="left">unpack(vector,mask,array)</td><td align="left">它散射一个载体，掩码下的控制阵列。逻辑阵列掩模的形状具有以符合一个用于数组。阵列载体必须具有等级1(即它是一个向量)与至少一样多的元素是那些掩码内值都为true，并且还必须具有相同类型阵列。如果阵列被给定为一个标量，然后它被认为是使用相同形状的掩码，并在同一标量元素无处不在的阵列。其结果将是具有相同形状的掩码和类型相同的矢量阵列。该值将是那些从所接受的载体，而在阵列的剩余位置的旧值被保留。</td></tr></tbody></table><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arrayConstruction</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">interface</span></span><br><span class="line">      <span class="function"><span class="keyword">subroutine</span></span> write_array(a)</span><br><span class="line">         <span class="keyword">real</span> ::a(:,:)</span><br><span class="line">      <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">subroutine</span></span> write_l_array(a)</span><br><span class="line">         <span class="keyword">logical</span> :: a(:,:)</span><br><span class="line">      <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>, <span class="keyword">dimension</span>(<span class="number">2</span>,<span class="number">3</span>) :: tsource, fsource, result</span><br><span class="line">   <span class="keyword">logical</span>, <span class="keyword">dimension</span>(<span class="number">2</span>,<span class="number">3</span>) :: mask</span><br><span class="line"></span><br><span class="line">   tsource = <span class="built_in">reshape</span>( (/ <span class="number">35</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">26</span>, <span class="number">39</span> /), &amp;</span><br><span class="line">      (/ <span class="number">2</span>, <span class="number">3</span> /) )</span><br><span class="line">   fsource = <span class="built_in">reshape</span>( (/ -<span class="number">35</span>, -<span class="number">23</span>, -<span class="number">18</span>, -<span class="number">28</span>, -<span class="number">26</span>, -<span class="number">39</span> /), &amp;</span><br><span class="line">      (/ <span class="number">2</span>,<span class="number">3</span> /) )</span><br><span class="line">   mask = <span class="built_in">reshape</span>( (/ .true., .false., .false., .true., &amp;</span><br><span class="line">      .false., .false. /), (/ <span class="number">2</span>,<span class="number">3</span> /) )</span><br><span class="line"></span><br><span class="line">   result = <span class="built_in">merge</span>(tsource, fsource, mask)</span><br><span class="line">   <span class="keyword">call</span> write_array(tsource)</span><br><span class="line">   <span class="keyword">call</span> write_array(fsource)</span><br><span class="line">   <span class="keyword">call</span> write_l_array(mask)</span><br><span class="line">   <span class="keyword">call</span> write_array(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arrayConstruction</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">subroutine</span></span> write_array(a)</span><br><span class="line">   <span class="keyword">real</span> :: a(:,:)</span><br><span class="line">   <span class="keyword">do</span> i=<span class="built_in">lbound</span>(a,<span class="number">1</span>),<span class="built_in">ubound</span>(a,<span class="number">1</span>)</span><br><span class="line">      <span class="built_in">write</span>(*,*) (a(i,j),j=<span class="built_in">lbound</span>(a,<span class="number">2</span>),<span class="built_in">ubound</span>(a,<span class="number">2</span>))</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> write_array</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">subroutine</span></span> write_l_array(a)</span><br><span class="line">   <span class="keyword">logical</span> :: a(:,:)</span><br><span class="line">   <span class="keyword">do</span> i=<span class="built_in">lbound</span>(a,<span class="number">1</span>),<span class="built_in">ubound</span>(a,<span class="number">1</span>)</span><br><span class="line">      <span class="built_in">write</span>(*,*)(a(i,j),j=<span class="built_in">lbound</span>(a,<span class="number">2</span>),<span class="built_in">ubound</span>(a,<span class="number">2</span>))</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> write_l_array</span><br></pre></td></tr></table></figure><h3 id="fortran-重塑函数"><a href="#fortran-重塑函数" class="headerlink" title="fortran 重塑函数"></a>fortran 重塑函数</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">reshape(source,shape,padmorder)</td><td align="left">它构造一个特定形状的形状，从一个给定source阵列中的元素开始的数组。如果垫不包含则soure的尺寸必须至少为产物(形状)。如果pad包括在内，它必须具有相同的类型的soure。如果order被包括，它必须使用相同的形状的形状的整数数组，值必须是一个排列(1,2,3，…，n)，其中n是在形状要素的数量，它必须小于或等于7。</td></tr></tbody></table><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arrayReshape</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">interface</span></span><br><span class="line">      <span class="function"><span class="keyword">subroutine</span></span> write_matrix(a)</span><br><span class="line">         <span class="keyword">real</span>,<span class="keyword">dimension</span>(:,:)::a</span><br><span class="line">      <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>, <span class="keyword">dimension</span> (<span class="number">1</span>:<span class="number">9</span>) :: b = (/ <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span> /)</span><br><span class="line">   <span class="keyword">real</span>, <span class="keyword">dimension</span> (<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">3</span>) :: c, d, e</span><br><span class="line">   <span class="keyword">real</span>, <span class="keyword">dimension</span> (<span class="number">1</span>:<span class="number">4</span>, <span class="number">1</span>:<span class="number">4</span>) :: f, g, h</span><br><span class="line"></span><br><span class="line">   <span class="keyword">integer</span>, <span class="keyword">dimension</span> (<span class="number">1</span>:<span class="number">2</span>) :: order1= (/ <span class="number">1</span>, <span class="number">2</span> /)</span><br><span class="line">   <span class="keyword">integer</span>, <span class="keyword">dimension</span> (<span class="number">1</span>:<span class="number">2</span>) :: order2= (/ <span class="number">2</span>, <span class="number">1</span> /)</span><br><span class="line">   <span class="keyword">real</span>, <span class="keyword">dimension</span> (<span class="number">1</span>:<span class="number">16</span>) :: pad1 = (/ -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>, -<span class="number">6</span>, -<span class="number">7</span>, -<span class="number">8</span>, &amp;</span><br><span class="line">   &amp; -<span class="number">9</span>, -<span class="number">10</span>, -<span class="number">11</span>, -<span class="number">12</span>, -<span class="number">13</span>, -<span class="number">14</span>, -<span class="number">15</span>, -<span class="number">16</span> /)</span><br><span class="line"></span><br><span class="line">   c=<span class="built_in">reshape</span>(b,(/<span class="number">3</span>,<span class="number">3</span>/))</span><br><span class="line">   <span class="keyword">call</span> write_matrix(c)</span><br><span class="line"></span><br><span class="line">   d=<span class="built_in">reshape</span>(b,(/<span class="number">3</span>,<span class="number">3</span>/),order=order1)</span><br><span class="line">   <span class="keyword">call</span> write_matrix(d)</span><br><span class="line"></span><br><span class="line">   e=<span class="built_in">reshape</span>(b,(/<span class="number">3</span>,<span class="number">3</span>/),order=order2)</span><br><span class="line">   <span class="keyword">call</span> write_matrix(e)</span><br><span class="line"></span><br><span class="line">   f=<span class="built_in">reshape</span>(b,(/<span class="number">4</span>,<span class="number">4</span>/),<span class="keyword">pad</span>=pad1)</span><br><span class="line">   <span class="keyword">call</span> write_matrix(f)</span><br><span class="line"></span><br><span class="line">   g = <span class="built_in">reshape</span>( b, (/ <span class="number">4</span>, <span class="number">4</span> /), <span class="keyword">pad</span> = pad1, order = order1)</span><br><span class="line">   <span class="keyword">call</span> write_matrix(g)</span><br><span class="line"></span><br><span class="line">   h = <span class="built_in">reshape</span>( b, (/ <span class="number">4</span>, <span class="number">4</span> /), <span class="keyword">pad</span> = pad1, order = order2)</span><br><span class="line">   <span class="keyword">call</span> write_matrix(h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arrayReshape</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">subroutine</span></span> write_matrix(a)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">dimension</span>(:,:):: a</span><br><span class="line">   <span class="keyword">integer</span> :: i,j</span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> i=<span class="built_in">lbound</span>(a,<span class="number">1</span>),<span class="built_in">ubound</span>(a,<span class="number">1</span>)</span><br><span class="line">      <span class="built_in">write</span>(*,*) (a(i,j),j=<span class="built_in">lbound</span>(a,<span class="number">2</span>),<span class="built_in">ubound</span>(a,<span class="number">2</span>))</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">write</span>(*,*)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> write_matrix</span><br></pre></td></tr></table></figure><h3 id="fortran-操作函数"><a href="#fortran-操作函数" class="headerlink" title="fortran 操作函数"></a>fortran 操作函数</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">cshift(array,shift,dim)</td><td align="left">它执行循环移位由移位置的左边，如果移位是正和到右侧，如果它是负的。如果阵列是一个矢量移位正在做以自然的方式中，如果它是一个较高级的阵列则移是沿着维数dim的所有部分。若dim缺少它被认为是1，在其它情况下它必须是1和n(其中n等于阵列的等级)之间的标量整数。该参数换档是一个标量整数或秩n-1个整数的数组和形状相同的阵列中，除沿维数dim(在较低级的，因为它被移除)。不同的部分，因此可以转移在各个方向上，并与各种数目的位置。</td></tr><tr><td align="left">eoshift(array, shift, boundary, dim)</td><td align="left">这是端关闭的转变。它执行向左移动，如果移位是正和到右侧，如果它是负的。相反的元素移出新元素均取自边界。如果阵列是一个矢量移位正在做以自然的方式中，如果它是一个较高级的阵列，在所有各节中的移位是以及该维度暗淡。若 dim 丢失，它被认为是1，但在其它情况下，它为1和n(其中n等于阵列的秩)之间有一个标量的整数值。该参数换档是一个标量整数，如果阵列具有秩1，在其他情况下，它可以是一个标量整数或秩n-1和形状相同的阵列排列的与除沿维数dim 的整数数组(其被取出因为较低级的)。</td></tr><tr><td align="left">transpose(matrix)</td><td align="left">其转置矩阵,这是秩为2的阵列取代了的行和列矩阵。</td></tr></tbody></table><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arrayshift</span><br><span class="line"></span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span> ,<span class="keyword">dimension</span>(<span class="number">1</span>:<span class="number">6</span>)::a=(/<span class="number">23.45</span>,<span class="number">73.3</span>,<span class="number">12.7</span>,<span class="number">22.45</span>,<span class="number">23.4</span>,<span class="number">54.2</span>/)</span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">1</span>:<span class="number">6</span>)::x,y</span><br><span class="line"></span><br><span class="line">   <span class="built_in">write</span>(*,*) a(:)</span><br><span class="line"></span><br><span class="line">   x=<span class="built_in">cshift</span>(a,shift=<span class="number">2</span>)</span><br><span class="line">   <span class="built_in">write</span>(*,*) x(:)</span><br><span class="line"></span><br><span class="line">   y=<span class="built_in">cshift</span>(a,shift=-<span class="number">2</span>)</span><br><span class="line">   <span class="built_in">write</span>(*,*) y(:)</span><br><span class="line"></span><br><span class="line">   x=<span class="built_in">eoshift</span>(a,shift=<span class="number">2</span>)</span><br><span class="line">   <span class="built_in">write</span>(*,*) x(:)</span><br><span class="line"></span><br><span class="line">   x=<span class="built_in">eoshift</span>(a,shift=-<span class="number">2</span>)</span><br><span class="line">   <span class="built_in">write</span>(*,*) x(:)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arrayshift</span><br></pre></td></tr></table></figure><h3 id="位置函数"><a href="#位置函数" class="headerlink" title="位置函数"></a>位置函数</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">maxloc(array,mask)</td><td align="left">它返回数组中的最大元素的位置上，如果掩码仅包含那些其中满足条件的掩码，则返回位置，其结果是一个整数向量。</td></tr><tr><td align="left">minloc(array,mask)</td><td align="left">它返回数组的数组中的最小元素的位置，如果掩码仅包含那些其中满足条件的掩码，则返回位置，其结果是一个整数向量。</td></tr></tbody></table><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> arraylocation</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">1</span>:<span class="number">6</span>)::a=(/<span class="number">32.34</span>,<span class="number">45.5</span>,<span class="number">7.3</span>,<span class="number">257.6</span>,<span class="number">45.7</span>,<span class="number">34.23</span>/)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">maxloc</span>(a),a(<span class="built_in">maxloc</span>(a))</span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">minloc</span>(a),a(<span class="built_in">minloc</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> arraylocation</span><br></pre></td></tr></table></figure><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><p>动态数组在编译时不知道，在执行时确定，属性使用allocatable声明(real,dimensition(:,:),allocatable::darray) 分配内存以这样的阵列，用allocate函数，用deallocate函数解除内存。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> dynamic_array</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">dimension</span>(:,:),<span class="keyword">allocatable</span>::darray</span><br><span class="line">   <span class="keyword">integer</span> :: s1,s2</span><br><span class="line">   <span class="keyword">integer</span> :: i,j</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span>*, <span class="string">&quot;Enter the size of the array:&quot;</span></span><br><span class="line">   read *,s1,s2</span><br><span class="line"></span><br><span class="line">   <span class="built_in">allocate</span>(darray(s1,s2))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,s1</span><br><span class="line">      <span class="keyword">do</span> j=<span class="number">1</span>,s2</span><br><span class="line">         darray(i,j)=i*j+<span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> i=<span class="built_in">lbound</span>(darray,<span class="number">1</span>),<span class="built_in">ubound</span>(darray,<span class="number">1</span>)</span><br><span class="line">      <span class="built_in">write</span>(*,*) (darray(i,j),j=<span class="built_in">lbound</span>(darray,<span class="number">2</span>),<span class="built_in">ubound</span>(darray,<span class="number">2</span>))</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">deallocate</span>(darray)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> dynamic_array</span><br></pre></td></tr></table></figure><h3 id="导出的数据类型"><a href="#导出的数据类型" class="headerlink" title="导出的数据类型"></a>导出的数据类型</h3><ul><li>定义派生数据类型，声明格式</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> type_name</span><br><span class="line">   declarations</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">type</span></span><br></pre></td></tr></table></figure><ul><li>访问结构成员</li></ul><p>一个派生数据类型的对象称为结构，类型声明语句创建(type(Books):: book1)选择字符(%)进行访问(book1%title&#x3D;”fortran”).</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> deriveDataType</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">type</span> Books</span><br><span class="line">      <span class="keyword">character</span>(len=<span class="number">50</span>)::title</span><br><span class="line">      <span class="keyword">character</span>(len=<span class="number">50</span>)::author</span><br><span class="line">      <span class="keyword">character</span>(len=<span class="number">150</span>)::subject</span><br><span class="line">      <span class="keyword">integer</span>::book_id</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">type</span> Books</span><br><span class="line">   <span class="keyword">type</span>(Books) :: book1</span><br><span class="line">   <span class="keyword">type</span>(Books) :: book2</span><br><span class="line"></span><br><span class="line">   book1%title = <span class="string">&quot;C Programming&quot;</span></span><br><span class="line">   book1%author = <span class="string">&quot;Nuha Ali&quot;</span></span><br><span class="line">   book1%subject = <span class="string">&quot;C Programming Tutorial&quot;</span></span><br><span class="line">   book1%book_id = <span class="number">6495407</span></span><br><span class="line"></span><br><span class="line">   book2%title = <span class="string">&quot;Telecom Billing&quot;</span></span><br><span class="line">   book2%author = <span class="string">&quot;Zara Ali&quot;</span></span><br><span class="line">   book2%subject = <span class="string">&quot;Telecom Billing Tutorial&quot;</span></span><br><span class="line">   book2%book_id = <span class="number">6495700</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">Print</span> *, book1%title</span><br><span class="line">   <span class="built_in">Print</span> *, book1%author</span><br><span class="line">   <span class="built_in">Print</span> *, book1%subject</span><br><span class="line">   <span class="built_in">Print</span> *, book1%book_id</span><br><span class="line"></span><br><span class="line">   <span class="built_in">Print</span> *, book2%title</span><br><span class="line">   <span class="built_in">Print</span> *, book2%author</span><br><span class="line">   <span class="built_in">Print</span> *, book2%subject</span><br><span class="line">   <span class="built_in">Print</span> *, book2%book_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> deriveDataType</span><br></pre></td></tr></table></figure><h3 id="fortran-指针"><a href="#fortran-指针" class="headerlink" title="fortran 指针"></a>fortran 指针</h3><p>在Fortran中，指针是具有不是仅仅存储存储器地址多功能性的数据对象。它包含有关特定对象的详细信息，如类型，等级，扩展和存储器地址。</p><ul><li>声明指针变量</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">integer</span>,<span class="keyword">pointer</span> :: p1</span><br><span class="line"><span class="keyword">real</span>,<span class="keyword">pointer</span>,<span class="keyword">dimension</span>(:)::pra</span><br></pre></td></tr></table></figure><p>指针可以指向动态分配的内存区域、数据对象与目标属性相同类型的指针。</p><ul><li><p>分配指针的空间(allocate)</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> pointExample</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">integer</span>,<span class="keyword">pointer</span>::p1</span><br><span class="line">   <span class="built_in">allocate</span>(p1)</span><br><span class="line"></span><br><span class="line">   p1=<span class="number">1</span></span><br><span class="line">   <span class="built_in">print</span>*,p1</span><br><span class="line">   p1=p1+<span class="number">4</span></span><br><span class="line">   <span class="built_in">print</span>*,p1</span><br><span class="line"></span><br><span class="line">   <span class="built_in">deallocate</span>(p1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> pointExample</span><br></pre></td></tr></table></figure></li><li><p>指针的目标与关联，其中关联操作符(&#x3D;&gt;)</p></li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> pointExample</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">integer</span>,<span class="keyword">pointer</span> :: p1</span><br><span class="line">   <span class="keyword">integer</span>,<span class="keyword">target</span>::t1</span><br><span class="line"></span><br><span class="line">   p1=&gt;t1</span><br><span class="line">   p1=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,p1</span><br><span class="line">   <span class="built_in">print</span> *,t1</span><br><span class="line"></span><br><span class="line">   p1=p1+<span class="number">4</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,p1</span><br><span class="line">   <span class="built_in">print</span> *,t1</span><br><span class="line"></span><br><span class="line">   t1=<span class="number">8</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,p1</span><br><span class="line">   <span class="built_in">print</span> *,t1</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> pointExample</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> pointerExample</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span>,<span class="keyword">pointer</span> ::p1</span><br><span class="line">    <span class="keyword">integer</span>,<span class="keyword">target</span> :: t1</span><br><span class="line">    <span class="keyword">integer</span>,<span class="keyword">target</span> :: t2</span><br><span class="line"></span><br><span class="line">    p1=&gt;t1</span><br><span class="line">    p1=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>*,p1</span><br><span class="line">    <span class="built_in">print</span>*,t1</span><br><span class="line"></span><br><span class="line">    p1=p1+<span class="number">4</span></span><br><span class="line">    <span class="built_in">print</span>*,p1</span><br><span class="line">    <span class="built_in">print</span>*,t1</span><br><span class="line"></span><br><span class="line">    t1=<span class="number">8</span></span><br><span class="line">    <span class="built_in">print</span> *,p1</span><br><span class="line">    <span class="built_in">print</span>*,t1</span><br><span class="line"></span><br><span class="line">    <span class="built_in">nullify</span>(p1)</span><br><span class="line">    <span class="built_in">print</span> *,t1</span><br><span class="line"></span><br><span class="line">    p1=&gt;t2</span><br><span class="line">    <span class="built_in">print</span>*,<span class="built_in">associated</span>(p1)</span><br><span class="line">    <span class="built_in">print</span>*,<span class="built_in">associated</span>(p1,t1)</span><br><span class="line">    <span class="built_in">print</span>*,<span class="built_in">associated</span>(p1,t2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>*,p1</span><br><span class="line">    <span class="built_in">print</span>*,t2</span><br><span class="line">    </span><br><span class="line">    p1=<span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span> *,p1</span><br><span class="line">    <span class="built_in">print</span> *,t2</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> pointerExample</span><br></pre></td></tr></table></figure><h3 id="fortran基本输入输出"><a href="#fortran基本输入输出" class="headerlink" title="fortran基本输入输出"></a>fortran基本输入输出</h3><ul><li>格式化输入输出<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">read <span class="keyword">fmt</span>,variable_list</span><br><span class="line"><span class="built_in">print</span> <span class="keyword">fmt</span>,variable_list</span><br><span class="line"><span class="built_in">write</span> <span class="keyword">fmt</span>,variable_list</span><br></pre></td></tr></table></figure></li></ul><ol><li>fmt 是格式规范</li><li>variable_list 是变量列表</li></ol><ul><li>描述符 (I,F,E,ES,A,X,&#x2F;)</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> printPi</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">real</span>,<span class="keyword">parameter</span>::pi = <span class="number">3.141592653589793238</span> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;(f6.3)&quot;</span>,pi</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;(f10.7)&quot;</span>,pi </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;(f20.10)&quot;</span>,pi</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;(es16.4)&quot;</span>,pi</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> printPi</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">character</span>(len=<span class="number">15</span>)::first_name</span><br><span class="line">    <span class="built_in">print</span> *,<span class="string">&quot;Enter your first name&quot;</span></span><br><span class="line"></span><br><span class="line">    read *,first_name</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;(1x,a2)&quot;</span>,first_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> <span class="keyword">name</span></span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> formattedPrint</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">   <span class="keyword">real</span> :: c=<span class="number">1.122334e-9</span>,d=<span class="number">0.23234342e3</span></span><br><span class="line">   <span class="keyword">integer</span> :: n =<span class="number">4333523</span>,k=<span class="number">45</span>,i=<span class="number">2</span></span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">15</span>):: str=<span class="string">&quot;Tutorials Point&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span><span class="string">&quot;(i6)&quot;</span>,k</span><br><span class="line">   <span class="built_in">print</span><span class="string">&quot;(i6.3)&quot;</span>,k</span><br><span class="line">   <span class="built_in">print</span><span class="string">&quot;(3i10)&quot;</span>,n,k,i</span><br><span class="line">   <span class="built_in">print</span><span class="string">&quot;(i10,i3,i2)&quot;</span>,n,k,i</span><br><span class="line">   <span class="built_in">print</span><span class="string">&quot;(a15)&quot;</span>,str</span><br><span class="line">   <span class="built_in">print</span><span class="string">&quot;(f12.3)&quot;</span>,d</span><br><span class="line">   <span class="built_in">print</span><span class="string">&quot;(e12.4)&quot;</span>,c</span><br><span class="line">   <span class="built_in">print</span><span class="string">&#x27;(/,3x,&quot;n=&quot;,i8,3x,&quot;d=&quot;,f7.4)&#x27;</span>,n,d</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> formattedPrint</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> productDetails</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">   <span class="keyword">character</span>(len=<span class="number">15</span>)::<span class="keyword">name</span></span><br><span class="line">   <span class="keyword">integer</span> :: id</span><br><span class="line">   <span class="keyword">real</span> :: weight</span><br><span class="line">   <span class="keyword">name</span> = <span class="string">&#x27;Ardupilot&#x27;</span></span><br><span class="line">   id=<span class="number">2</span></span><br><span class="line">   weight=<span class="number">0.343</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;The peoduct details are&quot;</span></span><br><span class="line">   <span class="built_in">print</span> <span class="number">100</span></span><br><span class="line"><span class="number">100</span> <span class="keyword">format</span>(<span class="string">&#x27;name:&#x27;</span>,<span class="number">7</span>x,<span class="string">&#x27;Id:&#x27;</span>,<span class="number">7</span>x,<span class="string">&#x27;Weight:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> <span class="number">200</span> ,<span class="keyword">name</span>,id ,weight</span><br><span class="line"><span class="number">200</span> <span class="keyword">format</span>(a9,<span class="number">2</span>x,i2,<span class="number">8</span>x,f5<span class="number">.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> productDetails</span><br></pre></td></tr></table></figure><h3 id="fortran-文件输入输出"><a href="#fortran-文件输入输出" class="headerlink" title="fortran 文件输入输出"></a>fortran 文件输入输出</h3><ul><li>打开和关闭文件</li></ul><p>使用open命令打开文家进行读取或写入(open(unit&#x3D;number,file&#x3D;”name”))，使用close关闭文件(close ([UNIT&#x3D;]u[,IOSTAT&#x3D;ios,ERR&#x3D;err,STATUS&#x3D;sta]))</p><ul><li>读取和写入文件</li></ul><p>读取文件(read ([UNIT&#x3D;]u, [FMT&#x3D;]fmt, IOSTAT&#x3D;ios, ERR&#x3D;err, END&#x3D;s))，写入文件(write([UNIT&#x3D;]u, [FMT&#x3D;]fmt, IOSTAT&#x3D;ios, ERR&#x3D;err, END&#x3D;s))</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> outputdata</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">100</span>)::x,y</span><br><span class="line">    <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">100</span>)::p,q</span><br><span class="line">    <span class="keyword">integer</span> :: i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">100</span></span><br><span class="line">        x(i)=i*<span class="number">0.1</span></span><br><span class="line">        y(i)=<span class="built_in">sin</span>(x(i))*(<span class="number">1</span>-<span class="built_in">cos</span>(x(i)/<span class="number">3.0</span>))</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    open(<span class="number">1</span>,<span class="keyword">file</span>=<span class="string">&#x27;data1.dat&#x27;</span>,<span class="keyword">status</span>=<span class="string">&#x27;old&#x27;</span>)</span><br><span class="line">    <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">100</span></span><br><span class="line">        <span class="built_in">write</span>(<span class="number">1</span>,*) x(i),y(i)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    close(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> outputdata</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> outputdata</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">100</span>)::x,y</span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">dimension</span>(<span class="number">100</span>)::p,q</span><br><span class="line">   <span class="keyword">integer</span> i</span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">100</span></span><br><span class="line">      x(i)=i*<span class="number">0.1</span></span><br><span class="line">      y(i)=<span class="built_in">sin</span>(x(i))*(<span class="number">1</span>-<span class="built_in">cos</span>(x(i)/<span class="number">3</span>))*x(i)</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">   open(<span class="number">1</span>,<span class="keyword">file</span>=<span class="string">&#x27;data2.dat&#x27;</span>,<span class="keyword">status</span>=<span class="string">&#x27;old&#x27;</span>)</span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">100</span></span><br><span class="line">      <span class="built_in">write</span>(<span class="number">1</span>,*) x(i),y(i)</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">   close(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">   open(<span class="number">2</span>,<span class="keyword">file</span>=<span class="string">&#x27;data2.dat&#x27;</span>,<span class="keyword">status</span>=<span class="string">&#x27;old&#x27;</span>)</span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">100</span></span><br><span class="line">    read(<span class="number">2</span>,*) p(i),q(i)</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">   close(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">100</span></span><br><span class="line">    <span class="built_in">write</span>(*,*) p(i),q(i)</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> outputdata</span><br></pre></td></tr></table></figure><h3 id="fortran-过程"><a href="#fortran-过程" class="headerlink" title="fortran 过程"></a>fortran 过程</h3><ul><li>函数<br>函数是一个返回数量的过程。下面是函数的语法。</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="keyword">name</span>(arg1, arg2, ....)  </span><br><span class="line">   [declarations, including those for the arguments]   </span><br><span class="line">   [executable statements] </span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> [<span class="keyword">name</span>]</span><br></pre></td></tr></table></figure><p>如果想返回的值存储在函数名的其他名称，则可以使用result选项。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="keyword">name</span>(arg1, arg2, ....) result (return_var_name)  </span><br><span class="line">   [declarations, including those for the arguments]   </span><br><span class="line">   [executable statements] </span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> [<span class="keyword">name</span>]</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> calling_func</span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span> :: a</span><br><span class="line"></span><br><span class="line">   a=area_of_circle(<span class="number">2.0</span>)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;The area of a circle with radius 2.0 is&quot;</span></span><br><span class="line">   <span class="built_in">print</span> *,a</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> calling_func</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span></span> area_of_circle(r)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span> ::area_of_circle</span><br><span class="line">   <span class="keyword">real</span> :: pi</span><br><span class="line">   <span class="keyword">real</span> :: r</span><br><span class="line"></span><br><span class="line">   pi=<span class="number">4</span>*<span class="built_in">atan</span>(<span class="number">1.0</span>)</span><br><span class="line">   area_of_circle=pi*r**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> area_of_circle</span><br></pre></td></tr></table></figure><ul><li>子程序<br>子程序没有返回值，但可以修改其参数。需要用call语句来调用一个子程序。</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">subroutine</span></span> <span class="keyword">name</span>(arg1, arg2, ....)    </span><br><span class="line">   [declarations, including those for the arguments]    </span><br><span class="line">   [executable statements]  </span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> [<span class="keyword">name</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">program calling_func</span><br><span class="line">    implicit none</span><br><span class="line">        </span><br><span class="line">    real:: a,b</span><br><span class="line">    a=2.0</span><br><span class="line">    b=3.0</span><br><span class="line"></span><br><span class="line">    print*,&quot;Before calling swap&quot;</span><br><span class="line">    print*,&quot;a=&quot;,a</span><br><span class="line">    print*,&quot;b=&quot;,b</span><br><span class="line"></span><br><span class="line">    call swap(a,b)</span><br><span class="line"></span><br><span class="line">    print *,&quot;After calling swap&quot;</span><br><span class="line">    print *,&quot;a=&quot;,a</span><br><span class="line">    print *,&quot;b=&quot;,b</span><br><span class="line"></span><br><span class="line">end program calling_func        </span><br><span class="line"></span><br><span class="line">subroutine swap(x,y)</span><br><span class="line">    implicit none</span><br><span class="line"></span><br><span class="line">    real :: x,y,temp</span><br><span class="line"></span><br><span class="line">    temp=x</span><br><span class="line">    x=y</span><br><span class="line">    y=temp</span><br><span class="line"></span><br><span class="line">end subroutine swap</span><br></pre></td></tr></table></figure><ul><li>指定参数的意图</li></ul><p>意图属性允许指定与参数的过程中使用的意向。下表提供intent属性的值：</p><table><thead><tr><th align="left">值</th><th align="left">使用</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">intent(in)</td><td align="left">用作输入值，而不是在函数中改变。</td></tr><tr><td align="left">out</td><td align="left">intent(out)</td><td align="left">用作输出值，将被覆盖。</td></tr><tr><td align="left">inout</td><td align="left">intent(inout)</td><td align="left">参数都使用和覆盖</td></tr></tbody></table><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> calling_func</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>::x,y,z,disc</span><br><span class="line">   x=<span class="number">1.0</span></span><br><span class="line">   y=<span class="number">5.0</span></span><br><span class="line">   z=<span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">call</span> intent_example(x,y,z,disc)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&quot;T value of the discriminant is&quot;</span></span><br><span class="line">   <span class="built_in">print</span> *,disc</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> calling_func</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">subroutine</span></span> intent_example(a,b,c,d)</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">intent</span>(<span class="keyword">in</span>)::a</span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">intent</span>(<span class="keyword">in</span>)::b</span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">intent</span>(<span class="keyword">in</span>)::c</span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">intent</span>(<span class="keyword">out</span>)::d</span><br><span class="line"></span><br><span class="line">   d=b*b-<span class="number">4.0</span>*a*c</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> intent_example</span><br></pre></td></tr></table></figure><ul><li>递归过程(递归发生在一个编程语言可以调用同一个函数在函数内。)</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> calling_func</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">integer</span> :: i,f</span><br><span class="line">   i=<span class="number">15</span></span><br><span class="line"> </span><br><span class="line">   <span class="built_in">print</span> *, <span class="string">&quot;The value of factorial 15 is&quot;</span></span><br><span class="line">   f=myfactorial(<span class="number">15</span>)</span><br><span class="line">   <span class="built_in">Print</span> *, f</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> calling_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">recursive</span> <span class="function"><span class="keyword">function</span></span> myfactorial (n) result(fac)</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">integer</span> :: fac</span><br><span class="line">   <span class="keyword">integer</span>,<span class="keyword">intent</span>(<span class="keyword">in</span>)::n</span><br><span class="line"></span><br><span class="line">   <span class="keyword">select</span> <span class="keyword">case</span>(n)</span><br><span class="line">    <span class="keyword">case</span>(<span class="number">0</span>:<span class="number">1</span>)</span><br><span class="line">      fac=<span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">default</span></span><br><span class="line">      fac=n*myfactorial(n-<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">select</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> myfactorial</span><br></pre></td></tr></table></figure><ul><li>内部过程(当一个过程被包含在程序中，它被称为程序的内部程序。)</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> mainprog</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>::a,b</span><br><span class="line">   a=<span class="number">2.0</span></span><br><span class="line">   b=<span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span>*,<span class="string">&quot;before calling swap&quot;</span></span><br><span class="line">   <span class="built_in">print</span>*,<span class="string">&quot;a=&quot;</span>,a</span><br><span class="line">   <span class="built_in">print</span>*,<span class="string">&quot;b=&quot;</span>,b</span><br><span class="line"></span><br><span class="line">   <span class="keyword">call</span> swap(a,b)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span>*,<span class="string">&quot;after calling swap&quot;</span></span><br><span class="line">   <span class="built_in">print</span>*,<span class="string">&quot;a=&quot;</span>,a</span><br><span class="line">   <span class="built_in">print</span>*,<span class="string">&quot;b=&quot;</span>,b</span><br><span class="line"></span><br><span class="line"><span class="keyword">contains</span></span><br><span class="line">   <span class="function"><span class="keyword">subroutine</span></span> swap(x,y)</span><br><span class="line">      <span class="keyword">real</span>::x,y,temp</span><br><span class="line">      temp=x</span><br><span class="line">      x=y</span><br><span class="line">      y=temp</span><br><span class="line">   <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> swap</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> mainprog</span><br></pre></td></tr></table></figure><h3 id="fortran-模块"><a href="#fortran-模块" class="headerlink" title="fortran 模块"></a>fortran 模块</h3><p>模块就像一个包，可以包含函数和子程序。</p><ul><li>模块的语法<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="keyword">name</span>     </span><br><span class="line">   [statement declarations]  </span><br><span class="line">   [<span class="keyword">contains</span> [<span class="function"><span class="keyword">subroutine</span></span> and <span class="function"><span class="keyword">function</span></span> definitions] ] </span><br><span class="line"><span class="keyword">end</span> <span class="keyword">module</span> [<span class="keyword">name</span>]</span><br></pre></td></tr></table></figure></li><li>模块的使用 (use name)</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> constants</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">parameter</span>::pi=<span class="number">3.1415927</span></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">parameter</span>:: e = <span class="number">2.7182818285</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">contains</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">subroutine</span></span> show_consts()</span><br><span class="line">      <span class="built_in">print</span> *,<span class="string">&quot;Pi=&quot;</span>,pi</span><br><span class="line">      <span class="built_in">print</span> *,<span class="string">&quot;e=&quot;</span>,e</span><br><span class="line">   <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> show_consts</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">module</span> constants</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">program</span></span> module_example</span><br><span class="line">    <span class="keyword">use</span> constants</span><br><span class="line"></span><br><span class="line">    <span class="keyword">real</span>:: x,epower,area,radius</span><br><span class="line">    x=<span class="number">2.0</span></span><br><span class="line">    radius=<span class="number">7.0</span></span><br><span class="line">    epower=e**x</span><br><span class="line">    area =pi*radius**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">call</span> show_consts()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> * ,epower</span><br><span class="line">    <span class="built_in">print</span> *,area</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> module_example</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> constants</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">private</span>,<span class="keyword">parameter</span>::pi=<span class="number">3.1415927</span></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">private</span>,<span class="keyword">parameter</span>:: e = <span class="number">2.7182818285</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">contains</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">subroutine</span></span> show_consts()</span><br><span class="line">      <span class="built_in">print</span> *,<span class="string">&quot;Pi=&quot;</span>,pi</span><br><span class="line">      <span class="built_in">print</span> *,<span class="string">&quot;e=&quot;</span>,e</span><br><span class="line">   <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> show_consts</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span></span> epower(x)result(epx)</span><br><span class="line">      <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">      <span class="keyword">real</span> ::x,epx</span><br><span class="line">      epx=e**x</span><br><span class="line">   <span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> epower</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span></span> areaCircle(r)result(area)</span><br><span class="line">      <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">      <span class="keyword">real</span> :: r,area</span><br><span class="line">      area=pi*r**<span class="number">2</span></span><br><span class="line">   <span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> areaCircle</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">module</span> constants</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">program</span></span> module_example</span><br><span class="line">   <span class="keyword">use</span> constants</span><br><span class="line"></span><br><span class="line">   <span class="keyword">call</span> show_consts()</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span>*,epower(<span class="number">2.0</span>)</span><br><span class="line">   <span class="built_in">print</span>*,areaCircle(<span class="number">7.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> module_example</span><br></pre></td></tr></table></figure><h3 id="fortran-内部函数"><a href="#fortran-内部函数" class="headerlink" title="fortran 内部函数"></a>fortran 内部函数</h3><ul><li>数值函数 (abs,aimag,aint,amint,ceiling,cmplx,conjg,dble,dim,dprod,floor,int,max,min,mod,modulo,nint,real,sign)</li><li>数学函数 (acos,asin,atan,atan2,cos,cosh,exp,log,log10,sin,sinh,sqrt,tan,tanh)</li><li>数字查询函数 (digits,epsilon,huge,maxexponent,minexponent,precision,radix,range,tiny)</li><li>浮点操作函数 (exponent,fraction,nearest,rrspacing,scale,set_exponent,spacing)</li><li>位操作函数 (bit_size,btest,iand,ibclr,ibits,ibset,ieor,ior,ishft,ishftc,not)</li><li>字符函数(achar,adjustl,adjustr,char,iachar,ichar,index,len,len_trim,lge,lgt,lle,llt,repeat,scan,trim,verify)</li><li>类函数 (Kind,selected_int_kind,selected_real_kind)</li><li>逻辑函数 (logical)</li><li>数组函数</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> numericaFunction</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span> :: a,b</span><br><span class="line">   <span class="keyword">complex</span> :: z</span><br><span class="line"></span><br><span class="line">   a=<span class="number">12.34</span></span><br><span class="line">   b=-<span class="number">45.22</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">write</span>(*,*) <span class="string">&#x27;abs(a):&#x27;</span>,<span class="built_in">abs</span>(a),<span class="string">&#x27;abs(b):&#x27;</span>,<span class="built_in">abs</span>(b)</span><br><span class="line">   <span class="built_in">write</span>(*,*) <span class="string">&#x27;aint(a):&#x27;</span>,<span class="built_in">aint</span>(a),<span class="string">&#x27;aint(b):&#x27;</span>,<span class="built_in">aint</span>(b)</span><br><span class="line">   <span class="built_in">write</span>(*,*) <span class="string">&#x27;ceiling(a): &#x27;</span>,<span class="built_in">ceiling</span>(a),<span class="string">&#x27; ceiling(b): &#x27;</span>,<span class="built_in">ceiling</span>(b)</span><br><span class="line">   <span class="built_in">write</span>(*,*) <span class="string">&#x27;floor(a): &#x27;</span>,<span class="built_in">floor</span>(a),<span class="string">&#x27; floor(b): &#x27;</span>,<span class="built_in">floor</span>(b)</span><br><span class="line"></span><br><span class="line">   z = <span class="built_in">cmplx</span>(a, b)</span><br><span class="line">   <span class="built_in">write</span>(*,*) <span class="string">&#x27;z: &#x27;</span>,z</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> numericaFunction</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> projectilemotion</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">parameter</span>:: g=<span class="number">9.8</span></span><br><span class="line">   <span class="keyword">real</span>,<span class="keyword">parameter</span>::pi=<span class="number">3.1415927</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>::a,t,u,x,y</span><br><span class="line"></span><br><span class="line">   a=<span class="number">45.0</span></span><br><span class="line">   t=<span class="number">20.0</span></span><br><span class="line">   u=<span class="number">10.0</span></span><br><span class="line"></span><br><span class="line">   a=a*pi/<span class="number">180</span></span><br><span class="line">   x = u * <span class="built_in">cos</span>(a) * t</span><br><span class="line">   y = u * <span class="built_in">sin</span>(a) * t - <span class="number">0.5</span> * g * t * t</span><br><span class="line"></span><br><span class="line">   <span class="built_in">write</span>(*,*) <span class="string">&#x27;x: &#x27;</span>,x,<span class="string">&#x27;  y: &#x27;</span>,y</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> projectilemotion</span><br></pre></td></tr></table></figure><h3 id="fortran-数字精度"><a href="#fortran-数字精度" class="headerlink" title="fortran 数字精度"></a>fortran 数字精度</h3><ul><li>类型属性 (king属性允许制定数字内部存储)</li><li>查询变量大小 (存储位数bit_size(i),小数位精度的数字precision(i),十进制范围range(x))</li><li>获取类型值 (selected_int_kind,selected_real_kind)</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> kindSpecifier</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=<span class="number">4</span>)::a,b,c</span><br><span class="line">    <span class="keyword">integer</span>(<span class="keyword">kind</span>=<span class="number">8</span>)::e,f,g</span><br><span class="line">    <span class="keyword">integer</span>(<span class="keyword">kind</span>=<span class="number">2</span>):: i,j,k</span><br><span class="line">    <span class="keyword">integer</span>(<span class="keyword">kind</span>=<span class="number">4</span>)::l,m,n</span><br><span class="line">    <span class="keyword">integer</span> :: kind_a,kind_i,kind_e,kind_l</span><br><span class="line"></span><br><span class="line">    kind_a=<span class="keyword">kind</span>(a)</span><br><span class="line">    kind_i=<span class="keyword">kind</span>(i)</span><br><span class="line">    kind_e=<span class="keyword">kind</span>(e)</span><br><span class="line">    kind_l=<span class="keyword">kind</span>(l)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> *,kind_a</span><br><span class="line">    <span class="built_in">print</span> *,kind_e</span><br><span class="line">    <span class="built_in">print</span> *,kind_i</span><br><span class="line">    <span class="built_in">print</span> *,kind_l</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> kindSpecifier</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> getSize</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>(<span class="keyword">kind</span>=<span class="number">4</span>)::a</span><br><span class="line">   <span class="keyword">real</span>(<span class="keyword">kind</span>=<span class="number">8</span>)::b</span><br><span class="line">   <span class="keyword">integer</span>(<span class="keyword">kind</span>=<span class="number">2</span>)::i</span><br><span class="line">   <span class="keyword">integer</span>(<span class="keyword">kind</span>=<span class="number">4</span>)::j</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="keyword">precision</span>(a)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="keyword">precision</span>(b)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">range</span>(a)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">range</span>(b)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">maxexponent</span>(a)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">maxexponent</span>(b)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span>*,<span class="built_in">minexponent</span>(a)</span><br><span class="line">   <span class="built_in">print</span>*,<span class="built_in">minexponent</span>(b)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">bit_size</span>(i)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="built_in">bit_size</span>(j)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> getSize</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> getKind</span><br><span class="line">   <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">integer</span>:: i</span><br><span class="line">   i = <span class="built_in">selected_real_kind</span> (p = <span class="number">20</span>, r = <span class="number">99</span>)</span><br><span class="line">   <span class="built_in">print</span> *,<span class="string">&#x27;selected_real_kind (p = 10, r = 99)&#x27;</span>, i</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> getKind</span><br></pre></td></tr></table></figure><h3 id="fortran-编程风格"><a href="#fortran-编程风格" class="headerlink" title="fortran 编程风格"></a>fortran 编程风格</h3><p>好的程序标准</p><ol><li>可读性</li><li>正确的逻辑结构</li><li>不言自明的注释和备注</li><li>缩进代码块，使各个层次的代码清晰。</li><li>自我检查代码，以确保零会有类似除法，没有数值误错，负实数的负实数或对数平方根。</li><li>包括代码，以确保变量不采取非法或超范围值，即输入验证。</li><li>没有把检查是不必要的，并且会减慢执行。</li><li>采用适当的算法的代码编写明显。</li><li>拆分延续长表达式使用标记 ‘&amp;’。</li><li>富有意义的变量名命名。</li></ol><h3 id="fortran-调试程序"><a href="#fortran-调试程序" class="headerlink" title="fortran 调试程序"></a>fortran 调试程序</h3><ul><li><p>调试程序的过程 (设置断点-&gt;通过源码步进-&gt;设置观察点)</p></li><li><p>gbd调试器</p></li></ul><table><thead><tr><th align="left">命令</th><th align="left">目的</th></tr></thead><tbody><tr><td align="left">break</td><td align="left">设置断点</td></tr><tr><td align="left">run</td><td align="left">开始执行</td></tr><tr><td align="left">cont</td><td align="left">继续执行</td></tr><tr><td align="left">next</td><td align="left">只执行源代码的下一行，不进一步的任何函数调用</td></tr><tr><td align="left">step</td><td align="left">通过步入函数情况下，一个函数调用执行源代码的下一行</td></tr></tbody></table><ul><li>dbx调试器</li></ul><table><thead><tr><th align="left">命令</th><th align="left">目的</th></tr></thead><tbody><tr><td align="left">stop[var]</td><td align="left">设置一个断点当变量var的值更改。</td></tr><tr><td align="left">stop in[proc]</td><td align="left">它停止执行当过程被进入</td></tr><tr><td align="left">stop at[line]</td><td align="left">它在指定行设置一个断点</td></tr><tr><td align="left">run</td><td align="left">开始执行</td></tr><tr><td align="left">cont</td><td align="left">继续执行</td></tr><tr><td align="left">next</td><td align="left">只执行源代码的下一行，不进入任何函数调用。</td></tr><tr><td align="left">step</td><td align="left">通过步入函数情况下，一个函数调用执行源代码的下一行。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个关于fortran 的一个简单的入门学习笔记，包括fortran语言一些基础内容和相关的示例代码。主要的内容来源于&lt;a href=&quot;https://www.yiibai.com/fortran&quot;&gt;fortran教程 &lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;fortran的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/06/07/hello-world/"/>
    <id>http://example.com/2022/06/07/hello-world/</id>
    <published>2022-06-07T05:03:14.762Z</published>
    <updated>2022-06-07T05:03:14.762Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
